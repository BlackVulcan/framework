package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import util.JTextFieldLimit;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

/**
 * The Class LoginBox.
 */
public class LoginBox extends JDialog {
    public static final int SERVER_CONNECTION_SET = 1;
    private static final String PROPERTIES_FILE = "properties.xml";
    private static final Logger LOGGER = LogManager.getLogger(LoginBox.class);
    private static final String EMPTY_INPUT_ERROR = "No valid input.";
    private static final String CONNECT_ERROR = "Error when connecting.";
    private static final String ALREADY_CONNECTED = "Already Connected";
    private final Properties properties;
    private JPanel contentPane;
    private JTextField hostField;
    private JTextField portField;
    private JButton connectButton;
    private JTextField nameField;
    private JLabel loginError;
    private transient List<ActionListener> actionListenerList;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Instantiates a new login box.
     *
     * @param owner the owner
     */
    public LoginBox(JFrame owner) {
        super(owner);
        portField.setDocument(new JTextFieldLimit(5));
        properties = new Properties();
        loadProperties();
        actionListenerList = new ArrayList<>();
        setContentPane(contentPane);
        setMinimumSize(contentPane.getMinimumSize());
        setModal(true);
        setTitle("Connection Information");
        pack();

        hostField.addActionListener(event -> processEvent(new ActionEvent(this, LoginBox.SERVER_CONNECTION_SET, null)));
        portField.addActionListener(event -> processEvent(new ActionEvent(this, LoginBox.SERVER_CONNECTION_SET, null)));
        nameField.addActionListener(event -> processEvent(new ActionEvent(this, LoginBox.SERVER_CONNECTION_SET, null)));
        connectButton.addActionListener(event -> processEvent(new ActionEvent(this, LoginBox.SERVER_CONNECTION_SET, null)));

// call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

// call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    /**
     * Load properties.
     */
    private void loadProperties() {
        if (!new File(PROPERTIES_FILE).exists()) {
            return;
        }

        try {
            properties.loadFromXML(new FileInputStream(PROPERTIES_FILE));
        } catch (IOException e) {
            LOGGER.warn("Error loading properties.", e);
        }
        hostField.setText(properties.getProperty("HostField"));
        String port = properties.getProperty("PortField");
        portField.setText(port);
        nameField.setText(properties.getProperty("NameField"));
    }

    /**
     * Save properties.
     */
    private void saveProperties() {
        properties.setProperty("HostField", hostField.getText());
        properties.setProperty("PortField", portField.getText());
        properties.setProperty("NameField", nameField.getText());
        try {
            properties.storeToXML(new FileOutputStream(PROPERTIES_FILE), "");
        } catch (IOException e) {
            LOGGER.warn("Error saving properties.", e);
        }
    }

    /**
     * Gets the host.
     *
     * @return the host
     */
    public String getHost() {
        return hostField.getText();
    }

    /**
     * Gets the port.
     *
     * @return the port
     */
    public int getPort() {
        return Integer.parseInt(portField.getText());
    }

    /* (non-Javadoc)
     * @see java.awt.Component#getName()
     */
    @Override
    public String getName() {
        return nameField.getText();
    }

    /**
     * On cancel.
     */
    private void onCancel() {
// add your code here if necessary
        dispose();
    }

    /**
     * Adds the action listener.
     *
     * @param actionListener the action listener
     */
    public void addActionListener(ActionListener actionListener) {
        actionListenerList.add(actionListener);
    }

    /**
     * Process event.
     *
     * @param e the e
     */
    private void processEvent(ActionEvent e) {
        for (ActionListener l : actionListenerList)
            l.actionPerformed(e);
        saveProperties();
    }

    /**
     * Checks for input.
     *
     * @return true, if successful
     */
    public boolean hasInput() {
        return nameField.getText().length() > 0 && portField.getText().length() > 0 && hostField.getText().length() > 0;
    }

    /**
     * Show connect error.
     */
    public void showConnectError() {
        loginError.setText(CONNECT_ERROR);
        loginError.setVisible(true);
    }

    /**
     * Show empty error.
     */
    public void showEmptyError() {
        loginError.setText(EMPTY_INPUT_ERROR);
        loginError.setVisible(true);
    }

    /**
     * Show already connected.
     */
    public void showAlreadyConnected() {
        loginError.setText(ALREADY_CONNECTED);
        loginError.setVisible(true);
    }

    /**
     * Reset error.
     */
    public void resetError() {
        loginError.setVisible(false);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!.
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setMinimumSize(new Dimension(305, 160));
        contentPane.setPreferredSize(new Dimension(305, 160));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("IP");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Port");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Name");
        panel1.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        connectButton = new JButton();
        connectButton.setText("Connect");
        panel1.add(connectButton, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        portField = new JTextField();
        panel1.add(portField, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        hostField = new JTextField();
        panel1.add(hostField, new GridConstraints(0, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        nameField = new JTextField();
        panel1.add(nameField, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        loginError = new JLabel();
        loginError.setText("Error when connecting");
        loginError.setVisible(false);
        panel1.add(loginError, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * get root component.
     *
     * @return the JComponent
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
